@page "/vehicle/search"
@using BupaApp.Interfaces
@using BupaApp.Models
@using System.Linq
@inject IVehicleRepository _vehicle

<PageTitle>Search</PageTitle>

<h3>Mot History</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red;">Error: @errorMessage</p>
}

<div class="col-md-12 row">
    <div class="col-md-6">
        <label class="control-label">Enter Registration:</label>
        <InputText @bind-Value="registration"></InputText>
    </div>
    <div class="col-md-6">
        <Button @onclick="SearchDetails" Color="ButtonColor.Primary">Search</Button>
    </div>
</div>

@if (vehicles != null)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Make</th>
                <th>Model</th>
                <th>Colour</th>
                <th>Expiry Date</th>
                <th>Miles</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicle in vehicles)
            {
                <tr>
                <td>@vehicle.Make</td>
                <td>@vehicle.Model</td>
                <td>@vehicle.PrimaryColour</td>
              @if (vehicle.MotTests != null)
                {
                    <td>@vehicle.MotTests.FirstOrDefault().ExpiryDate</td>
                    <td>@vehicle.MotTests.FirstOrDefault().OdometerValue</td>
                }           
            </tr>
            }
            
        </tbody>
    </table>
}
else 
{
    <p>No Data Found.</p>
}

@code {
    private List<Vehicle> vehicles;
    private string errorMessage;
    public string registration;

    private async Task SearchDetails()
    {
        try
        {
            vehicles = await _vehicle.GetVehicle(registration);
            StateHasChanged(); // Trigger UI update if necessary
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
}   
}